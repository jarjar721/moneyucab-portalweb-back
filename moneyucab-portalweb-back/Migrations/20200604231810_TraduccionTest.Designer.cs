// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using moneyucab_portalweb_back.Data;

namespace moneyucab_portalweb_back.Migrations
{
    [DbContext(typeof(AuthenticationContext))]
    [Migration("20200604231810_TraduccionTest")]
    partial class TraduccionTest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("moneyucab_portalweb_back.Models.Entities.Comercio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idUsuario")
                        .HasColumnType("INT")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApellidoRepresentante")
                        .IsRequired()
                        .HasColumnName("apellido_representante")
                        .HasColumnType("VARCHAR(45)");

                    b.Property<string>("NombreRepresentante")
                        .IsRequired()
                        .HasColumnName("nombre_representante")
                        .HasColumnType("VARCHAR(45)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnName("razon_social")
                        .HasColumnType("VARCHAR(45)");

                    b.Property<int>("UsuarioID")
                        .HasColumnName("idUsuario")
                        .HasColumnType("INT");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioID")
                        .IsUnique();

                    b.ToTable("Comercio");
                });

            modelBuilder.Entity("moneyucab_portalweb_back.Models.Entities.EstadoCivil", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idEstadoCivil")
                        .HasColumnType("INT")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<char>("Codigo")
                        .HasColumnName("codigo")
                        .HasColumnType("CHAR(1)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnName("descripcion")
                        .HasColumnType("VARCHAR(45)");

                    b.Property<int>("Estatus")
                        .HasColumnName("estatus")
                        .HasColumnType("INT");

                    b.HasKey("ID");

                    b.ToTable("EstadoCivil");
                });

            modelBuilder.Entity("moneyucab_portalweb_back.Models.Entities.Persona", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idUsuario")
                        .HasColumnType("INT")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnName("apellido")
                        .HasColumnType("VARCHAR(45)");

                    b.Property<int>("EstadoCivilID")
                        .HasColumnName("idEstadoCivil")
                        .HasColumnType("INT");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnName("fecha_nacimiento")
                        .HasColumnType("DATE");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasColumnType("VARCHAR(45)");

                    b.Property<int>("UsuarioID")
                        .HasColumnName("idUsuario")
                        .HasColumnType("INT");

                    b.HasKey("ID");

                    b.HasIndex("EstadoCivilID");

                    b.HasIndex("UsuarioID")
                        .IsUnique();

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("moneyucab_portalweb_back.Models.Entities.PreviousPasswords", b =>
                {
                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UsuarioID")
                        .HasColumnType("text");

                    b.HasKey("PasswordHash");

                    b.HasIndex("UsuarioID");

                    b.ToTable("PreviousPasswords");
                });

            modelBuilder.Entity("moneyucab_portalweb_back.Models.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("SignupDate")
                        .HasColumnType("DATE");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("moneyucab_portalweb_back.Models.Entities.UsuarioIntermedio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idUsuario")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnName("direccion")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("VARCHAR(200)");

                    b.Property<string>("EntityID")
                        .IsRequired()
                        .HasColumnName("idEntity")
                        .HasColumnType("TEXT");

                    b.Property<int>("Estatus")
                        .HasColumnName("estatus")
                        .HasColumnType("INT");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnName("fecha_registro")
                        .HasColumnType("DATE");

                    b.Property<int>("NumeroIdentificacion")
                        .HasColumnName("nro_identificacion")
                        .HasColumnType("INT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnName("telefono")
                        .HasColumnType("VARCHAR(12)");

                    b.Property<int>("TipoIdentificacionID")
                        .HasColumnName("idTipoIdentificacion")
                        .HasColumnType("INT");

                    b.Property<int>("TipoUsuarioID")
                        .HasColumnName("idTipoUsuario")
                        .HasColumnType("INT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("usuario")
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("ID");

                    b.HasIndex("EntityID")
                        .IsUnique();

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("moneyucab_portalweb_back.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("moneyucab_portalweb_back.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moneyucab_portalweb_back.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("moneyucab_portalweb_back.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("moneyucab_portalweb_back.Models.Entities.Comercio", b =>
                {
                    b.HasOne("moneyucab_portalweb_back.Models.Entities.UsuarioIntermedio", "UsuarioIntermedio")
                        .WithOne("Comercio")
                        .HasForeignKey("moneyucab_portalweb_back.Models.Entities.Comercio", "UsuarioID")
                        .HasConstraintName("FK_Comercio_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("moneyucab_portalweb_back.Models.Entities.Persona", b =>
                {
                    b.HasOne("moneyucab_portalweb_back.Models.Entities.EstadoCivil", null)
                        .WithMany()
                        .HasForeignKey("EstadoCivilID")
                        .HasConstraintName("FK_Persona_EstadoCivil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("moneyucab_portalweb_back.Models.Entities.UsuarioIntermedio", "UsuarioIntermedio")
                        .WithOne("Persona")
                        .HasForeignKey("moneyucab_portalweb_back.Models.Entities.Persona", "UsuarioID")
                        .HasConstraintName("FK_Persona_Usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("moneyucab_portalweb_back.Models.Entities.PreviousPasswords", b =>
                {
                    b.HasOne("moneyucab_portalweb_back.Models.Entities.Usuario", "Usuario")
                        .WithMany("PreviousUserPasswords")
                        .HasForeignKey("UsuarioID");
                });

            modelBuilder.Entity("moneyucab_portalweb_back.Models.Entities.UsuarioIntermedio", b =>
                {
                    b.HasOne("moneyucab_portalweb_back.Models.Entities.Usuario", "Usuario")
                        .WithOne("UsuarioIntermedio")
                        .HasForeignKey("moneyucab_portalweb_back.Models.Entities.UsuarioIntermedio", "EntityID")
                        .HasConstraintName("FK_Usuario_Entity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
